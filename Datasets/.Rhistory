my_name <- c(my_char, "vkku")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "World !", collapse = " ")
swirl()
paste("Hello", "World !", sep = " ")
paste("Hello", "World!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "_")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
?rnorm()
swirl()
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
?sample
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
my_na
check <- my_na == T
check
check <- (my_na == T)
check
summary(my_na)
swirl()
swirl()
library("swirl")
swirl()
info()
main()
main()
ls()
swirl()
x
x[1:10]
x[is.na(x)]
y <- ![is.na(x)]
y <- !x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3:7)]
indexes <- c(3:7)
x[indexes]
x[c(3,5,7)]
x[0]
x[3000]
x[1]
swirl()
x[c(-2,-10)]
x[-c(2,5)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo, "bar", "norf"")
names(vect2) <- c("foo, "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
vect2
identical
identical(vect, vect2)
vect["bar"]
vect[c(foo, bar)]
vect[c("foo", "bar")]
c(44,NA,5,NA)
x <- c(44,NA,5,NA)
x*3
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
x <- c(1:20)
x <- c(1:20)
x
swirl()
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "bp", "rating")
cnames <- c("patient", "age", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_matrix, cnames)
?colnames
colnames(my_matrix) <- cnames
colnames(my_matrix) <- cnames
colnames(cnames)
colnames(my_data) <- cnames
my_data
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
swirl()
head(plants, n = 1:10)
head(plants, n = 10)
tail(plants, n=-15)
tail(plants, n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
ls()
class(plants)
skip()
skip()
skip()
skip()
class(plants)
class(plants)
class(plants)
class(plants)
class(plants)
class(plants)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
data(cars)
data(cars)
head(cars)
swirl()
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot("speed = cars$speed, cars$dist)
plot("speed" = cars$speed, cars$dist)
plot(cars$speed, cars$dist, xlab="Speed")
plot(cars$speed, cars$dist, ylab="Stopping Distance")
plot(cars$speed, cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars$speed, cars$dist, xlab="Speed", ylab="Stopping Distance", main =  "My Plot")
plot(cars, main =  "My Plot")
plot(cars, main =  "My Plot Subtitle", )
plot(cars, main =  "My Plot Subtitle" )
plot(cars, sub =  "My Plot Subtitle" )
?par
plot(cars, col=2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
data(mtcars)
play()
dim(mtcars)
summary(mtcars)
head(mtcars)
?mtcars
nxt()
?boxplot
boxplot(mpg ~ cyl)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
install_course_zip("C:/Users/Regular/Desktop/SocialR/14_310x_Advanced_R.zip", multi = FALSE)
swirl()
getwd()
ls()
x <- 94
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
ls()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(mytest.R, mytest2.R)
file.rename("mytest.R"", "mytest2.R"")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path
file.path("mytest3>r")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path(getwd), testdir2)
dir.create(file.path(getwd))
dir.create(testdir2)
dir.create(file.path(getwd), "testdir2", "testdir3")
dir.create(testdir2)
dir.create()
dir.create(getwd())
dir.create(file.path('testdir2', 'testdir3'), recursive = T)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink
unlink('testdir2', recursive=TRUE)
setwd() <- old.dir
setwd(old.dir)
unlink('testdir', recursive = TRUE)
swirl()
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
F & F
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, TRUE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE))
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 !+ 8 && 4 > 3.9
5 > 8 || 6 ! 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
play()
isTRUE(3)
isTRUE(9)
isTRUE(1)
isTRUE(0)
isTRUE('1')
isTRUE(t)
isTRUE(TRUE)
nxt()
info()
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
play()
Sys.chmod()
Sys.glob()
Sys.umask()
Sys.which()
Sys.getpid()
Sys.getlocale()
Sys.info()
Sys.time()
nxt()
mean(c*2,4,5)
mean(c(2,4,5))
boring_function <- function(x) {
x
}
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
play()
remainder(div = 2, 4)
nxt()
args(remainder)
play
play()
args(remainder())
args(remainder
)
nxt()
submit()
func(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd, (c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){ x }, x)
evaluate(function(x){ x[1] }, x)
evaluate(function(x){ x[1] })
evaluate(function(x){ x[1] }, x)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, x)
evaluate(function(x){x[0]}, x)
evaluate(function(x){x[0]}, x)
play()
nxt()
evaluate(function(x){ x[1] }, c(8,4,0))
play()
evaluate(function(x){ x[0] }, c(8,4,0))
evaluate(function(x){ x[1] }, c(8,4,0))
nxt()
evaluate(function(x){ x[-1] }, c(8,4,0))
play()
evaluate(function(x){ -x[1] }, c(8,4,0))
evaluate(function(x){ x[-1] }, c(8,4,0))
evaluate(function(x){ -x[c(1:length(x)-1)] }, c(8,4,0))
evaluate(function(x){ x[-c(1:length(x)-1)] }, c(8,4,0))
play
evaluate(function(x){ x[length(x)] }, c(8,4,0))
nxt()
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I'am in 1990s")
submit()
mad_libs(place = "DU", adjective = "Massive amounts of", noun = "Mobile Blockers")
play()
play
nxt()
submit()
I %p love %p R!
"I" %p "love" %p "R!"
"I" %p "love" %p "R!"
"I" %p "love" %p "R!"
("I" %p "love") %p "R!"
"Good" % "Job"
Good %p Job
"I" %p% "Love" %p% "R!"
"I" %p% "love" %p% "R!"
setwd("C:/Users/Regular/Desktop/analyticsJobs/data")
# Packages.
library(caret)
library(rpart)
library(rpart.plot)
library(e1071)
library(randomForest)
library(vcd)
# Importing data.
titanicData <- read.csv("C:/Users/Regular/Desktop/dataset/titanic.csv")
install.packages("caTools")
package.contents(caTools)
package_version(caTools)
setwd("D:\Code\Analytics")
setwd("D:/Code/Analytics")
quality <- read.csv("quality.csv")
setwd("D:/Code/Analytics/Datasets")
quality <- read.csv("quality.csv")
str(quality)
summary(quality$InpatientDays)
str(quality$InpatientDays)
scatterplot(quality)
sp(quality)
scatterplotMatrix(quality)
plot(quality)
table(quality$OfficeVisits, quality$Narcotics)
plot(quality$OfficeVisits, quality$quality$InpatientDays)
hist(plot(quality$OfficeVisits, quality$quality$InpatientDays))
hist(quality$OfficeVisits, quality$quality$InpatientDays)
hist(quality$OfficeVisits)
hist(quality$quality$InpatientDays)
typeof(quality$InpatientDays)
hist(quality$InpatientDays)
qualityTrain <- sample.split(quality$PoorCare, SplitRatio = 0.75)
library(caTools)
qualityTrain <- sample.split(quality$PoorCare, SplitRatio = 0.75)
summary(qualityTrain)
qualityTrain
#Logicals for training dataset split
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
split
qualityTrain
qualityTrain <- split(quality, split == TRUE)
summary(qualityTrain)
qualityTrain
str(qualityTrain)
qualityTrain <- subset(quality, split == TRUE)
summary(qualityTrain)
str(qualityTrain)
qualityTest <- subset(quality, split == FALSE)
summary(qualityTest)
str(qualityTest)
str(qualityTrain)
nrow(qualityTrain)
nrow(qualityTest)
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain)
str(qualityLog)
summary(qualityLog)
#Setting seed for homogenity in split
set.seed(88)
#Logicals for training dataset split
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
split
qualityTrain <- subset(quality, split == TRUE)
str(qualityTrain)
summary(qualityTrain)
qualityTest <- subset(quality, split == FALSE)
nrow(qualityTrain)
nrow(qualityTest)
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain)
summary(qualityLog)
qualityTest <- subset(quality, split == FALSE)
nrow(qualityTrain)
nrow(qualityTest)
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain)
summary(qualityLog)
library(caTools)
setwd("D:/Code/Analytics/Datasets")
quality <- read.csv("quality.csv")
str(quality)
summary(quality$InpatientDays)
str(quality$InpatientDays)
plot(quality)
plot(quality$OfficeVisits, quality$InpatientDays)
hist(quality$OfficeVisits)
hist(quality$InpatientDays)
#Setting seed for homogenity in split
set.seed(88)
#Logicals for training dataset split
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
split
qualityTrain <- subset(quality, split == TRUE)
summary(qualityTrain)
str(qualityTrain)
qualityTest <- subset(quality, split == FALSE)
nrow(qualityTrain)
nrow(qualityTest)
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain)
summary(qualityLog)
predictTrain <- predict(qualityLog, type = response)
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain, family = binomial)
summary(qualityLog)
predictTrain <- predict(qualityLog, type = response)
predictTrain <- predict(qualityLog, type = response)
predictTrain <- predict(qualityLog, type = "response"")
predictTrain <- predict(qualityLog, type = "response")
predictTrain <- predict(qualityLog, type = "response")
summary(precistTrain)
summary(precictTrain)
summary(predictTrain)
summary(predictTrain)
tapply(qualityTrain$PoorCare , predictTrain > 0.5)
#Library
library(caTools)
setwd("D:/Code/Analytics/Datasets")
quality <- read.csv("quality.csv")
str(quality)
summary(quality$InpatientDays)
str(quality$InpatientDays)
plot(quality)
plot(quality$OfficeVisits, quality$InpatientDays)
hist(quality$OfficeVisits)
hist(quality$InpatientDays)
#Setting seed for homogenity in split
set.seed(88)
#Logicals for training dataset split
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
split
qualityTrain <- subset(quality, split == TRUE)
summary(qualityTrain)
str(qualityTrain)
qualityTest <- subset(quality, split == FALSE)
nrow(qualityTrain)
nrow(qualityTest)
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain, family = binomial)
summary(qualityLog)
predictTrain <- predict(qualityLog, type = "response")
summary(predictTrain)
tapply(qualityTrain$PoorCare , predictTrain > 0.5)
table(qualityTrain$PoorCare , predictTrain > 0.5)
10/25
70/74
table(qualityTrain$PoorCare , predictTrain > 0.8)
23/25
73/74
table(qualityTrain$PoorCare , predictTrain > 0.2)
16/25
54/74
